package services

import (
	"crypto/hmac"
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"sort"
	"strings"
	"time"
	"web-api/internal/pkg/config"
)

type VNPayService struct {
	Config *config.VNPayConfig
}

func NewVNPayService(cfg *config.VNPayConfig) *VNPayService {
	return &VNPayService{Config: cfg}
}

// GenerateVNPayURL t·∫°o URL thanh to√°n VNPay v·ªõi ch·ªØ k√Ω ch√≠nh x√°c
func (v *VNPayService) GenerateVNPayURL(orderID string, amount int) (string, error) {
	log.Println("[VNPay] üîπ B·∫Øt ƒë·∫ßu t·∫°o URL thanh to√°n...")
	// üîπ Ki·ªÉm tra n·∫øu Config b·ªã nil
	if v.Config == nil {
		log.Fatal(" VNPayService.Config ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!")
		return "", fmt.Errorf("VNPayService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
	}
	vnpParams := map[string]string{
		"vnp_Version":    "2.1.0",
		"vnp_Command":    "pay",
		"vnp_TmnCode":    v.Config.TmnCode,
		"vnp_Amount":     fmt.Sprintf("%d", amount*100),
		"vnp_CurrCode":   "VND",
		"vnp_TxnRef":     orderID,
		"vnp_OrderInfo":  fmt.Sprintf("Thanh toan don hang %s", orderID),
		"vnp_OrderType":  "billpayment",
		"vnp_Locale":     "vn",
		"vnp_ReturnUrl":  v.Config.ReturnURL,
		"vnp_IpAddr":     "127.0.0.1",
		"vnp_CreateDate": time.Now().Format("20060102150405"),
	}

	log.Printf("[VNPay] Th√¥ng tin ƒë·∫ßu v√†o: %+v\n", vnpParams)

	// ‚úÖ Encode t·ª´ng tham s·ªë tr∆∞·ªõc khi hash
	hashData := v.createHash(vnpParams)

	// ‚úÖ T·∫°o query string ƒë√∫ng chu·∫©n
	queryString := v.createQueryString(vnpParams)

	// ‚úÖ T·∫°o URL thanh to√°n ch√≠nh x√°c
	paymentURL := fmt.Sprintf("%s?%s&vnp_SecureHash=%s", v.Config.BaseURL, queryString, hashData)

	log.Printf("[VNPay] ‚úÖ URL thanh to√°n: %s\n", paymentURL)

	return paymentURL, nil
}

// createQueryString t·∫°o query string ƒë√∫ng chu·∫©n
func (v *VNPayService) createQueryString(params map[string]string) string {
	values := url.Values{}
	for k, v := range params {
		values.Set(k, v)
	}
	return values.Encode()
}

// createHash t·∫°o m√£ checksum HMAC SHA512 ch√≠nh x√°c
func (v *VNPayService) createHash(params map[string]string) string {
	var keys []string
	for k := range params {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	var rawData []string
	for _, k := range keys {
		if k != "vnp_SecureHash" && k != "vnp_SecureHashType" {
			// üî• Encode t·ª´ng tham s·ªë tr∆∞·ªõc khi hash
			rawData = append(rawData, fmt.Sprintf("%s=%s", k, url.QueryEscape(params[k])))
		}
	}

	hashString := strings.Join(rawData, "&")
	log.Printf("[VNPay] üîπ Chu·ªói d·ªØ li·ªáu tr∆∞·ªõc khi hash: %s\n", hashString)

	h := hmac.New(sha512.New, []byte(v.Config.HashSecret))
	h.Write([]byte(hashString))
	hashResult := hex.EncodeToString(h.Sum(nil))

	log.Printf("[VNPay] ‚úÖ Hash SHA512: %s\n", hashResult)
	return hashResult
}

func (v *VNPayService) HandleVNPayCallback(w http.ResponseWriter, r *http.Request) {
	params := r.URL.Query()

	// L·∫•y order ID t·ª´ tham s·ªë callback (VNPay g·ª≠i `vnp_TxnRef`)
	orderID := params.Get("vnp_TxnRef")
	if orderID == "" {
		http.Error(w, "Thi·∫øu order ID", http.StatusBadRequest)
		return
	}

	// X√°c th·ª±c ch·ªØ k√Ω VNPay
	if !v.VerifyVNPaySignature(params) {
		http.Error(w, "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá", http.StatusForbidden)
		return
	}

	// Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
	paymentStatus := params.Get("vnp_ResponseCode")
	var orderStatus string
	if paymentStatus == "00" {
		orderStatus = "Th√†nh c√¥ng"
	} else {
		orderStatus = "Th·∫•t b·∫°i"
	}

	log.Printf("[VNPay] ‚úÖ Nh·∫≠n callback cho ƒë∆°n h√†ng %s, tr·∫°ng th√°i: %s", orderID, orderStatus)

	// Ph·∫£n h·ªìi cho VNPay bi·∫øt ƒë√£ x·ª≠ l√Ω xong
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "Callback x·ª≠ l√Ω th√†nh c√¥ng")
}

func (v *VNPayService) VerifyVNPaySignature(params url.Values) bool {
	// L·∫•y secret key t·ª´ config
	secretKey := v.Config.HashSecret
	if secretKey == "" {
		log.Println("[VNPay] ‚ùå Ch∆∞a c·∫•u h√¨nh secret key")
		return false
	}

	// L·∫•y ch·ªØ k√Ω t·ª´ request
	receivedSignature := params.Get("vnp_SecureHash")
	if receivedSignature == "" {
		log.Println("[VNPay] ‚ùå Thi·∫øu vnp_SecureHash")
		return false
	}

	// S·∫Øp x·∫øp tham s·ªë theo th·ª© t·ª± key (b·ªè qua vnp_SecureHash)
	var keys []string
	for k := range params {
		if k != "vnp_SecureHash" && k != "vnp_SecureHashType" {
			keys = append(keys, k)
		}
	}
	sort.Strings(keys)

	// T·∫°o chu·ªói d·ªØ li·ªáu ƒë·ªÉ hash
	var rawData []string
	for _, k := range keys {
		// ‚úÖ S·ª≠ d·ª•ng QueryEscape ƒë·ªÉ ƒë·∫£m b·∫£o encoding gi·ªëng l√∫c t·∫°o ch·ªØ k√Ω ban ƒë·∫ßu
		rawData = append(rawData, fmt.Sprintf("%s=%s", k, url.QueryEscape(params.Get(k))))
	}
	hashString := strings.Join(rawData, "&")

	// ‚úÖ Log ƒë·ªÉ ki·ªÉm tra chu·ªói hash g·ª≠i ƒë·∫øn VNPay
	log.Printf("[VNPay] üîπ Chu·ªói d·ªØ li·ªáu c·∫ßn hash (t·ª´ callback): %s\n", hashString)

	// T·∫°o hash HMAC SHA512
	h := hmac.New(sha512.New, []byte(secretKey))
	h.Write([]byte(hashString))
	expectedHash := hex.EncodeToString(h.Sum(nil))

	// ‚úÖ Log ƒë·ªÉ ki·ªÉm tra hash server t·∫°o ra
	log.Printf("[VNPay] üîπ Hash SHA512 mong ƒë·ª£i: %s\n", expectedHash)

	// Ki·ªÉm tra ch·ªØ k√Ω
	if strings.EqualFold(expectedHash, receivedSignature) {
		log.Println("[VNPay] ‚úÖ Ch·ªØ k√Ω h·ª£p l·ªá")
		return true
	} else {
		log.Println("[VNPay] ‚ùå Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá")
		log.Printf("[VNPay] ‚ùå Hash nh·∫≠n ƒë∆∞·ª£c t·ª´ VNPay: %s\n", receivedSignature)
		return false
	}
}
