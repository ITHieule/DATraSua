package controllers

import (
	"log"
	"net/http"
	"strconv"
	"web-api/internal/api/services"
	"web-api/internal/pkg/models/request"

	"github.com/gin-gonic/gin"
)

// OrderController x·ª≠ l√Ω API ƒë·∫∑t h√†ng
type OrderController struct {
	orderService *services.OrderService
	vnpayService *services.VNPayService
}

// üîπ Bi·∫øn to√†n c·ª•c `Orders`
var Orders *OrderController

// Getter cho orderService
func (c *OrderController) GetOrderService() *services.OrderService {
	return c.orderService
}

// H√†m kh·ªüi t·∫°o `Orders`
func InitOrderController(orderService *services.OrderService, vnpayService *services.VNPayService) {
	Orders = &OrderController{
		orderService: orderService,
		vnpayService: vnpayService,
	}
	log.Println(" Orders ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")
}

// API ƒê·∫∑t h√†ng
func (c *OrderController) PlaceOrder(ctx *gin.Context) {
	// üîπ Ki·ªÉm tra xem orderService ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
	if c.orderService == nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": "OrderService ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o"})
		return
	}

	var orderRequest request.OrderRequest
	if err := ctx.ShouldBindJSON(&orderRequest); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"})
		return
	}

	// üîπ G·ªçi service ƒë·ªÉ x·ª≠ l√Ω ƒë·∫∑t h√†ng
	order, paymentURL, err := c.orderService.PlaceOrder(orderRequest)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusOK, gin.H{
		"order":       order,
		"payment_url": paymentURL,
	})
}

// VNPayCallback x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ VNPay
func (c *OrderController) VNPayCallback(ctx *gin.Context) {
	params := ctx.Request.URL.Query()

	// ‚úÖ Ki·ªÉm tra ch·ªØ k√Ω VNPay tr∆∞·ªõc khi x·ª≠ l√Ω
	if !c.vnpayService.VerifyVNPaySignature(params) {
		ctx.JSON(http.StatusForbidden, gin.H{"error": "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá"})
		return
	}

	orderID := params.Get("vnp_TxnRef")
	transactionStatus := params.Get("vnp_ResponseCode")

	if orderID == "" || transactionStatus == "" {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Thi·∫øu th√¥ng tin ph·∫£n h·ªìi t·ª´ VNPay"})
		return
	}

	var statusMessage string
	if transactionStatus == "00" {
		statusMessage = "Giao d·ªãch th√†nh c√¥ng"
	} else {
		statusMessage = "Giao d·ªãch th·∫•t b·∫°i"
	}

	log.Printf("[VNPay] ‚úÖ Nh·∫≠n callback cho ƒë∆°n h√†ng %s, tr·∫°ng th√°i: %s", orderID, statusMessage)

	// Ph·∫£n h·ªìi k·∫øt qu·∫£ m√† kh√¥ng c·∫≠p nh·∫≠t database
	ctx.JSON(http.StatusOK, gin.H{"message": "X·ª≠ l√Ω callback th√†nh c√¥ng", "transaction_status": statusMessage})
}

// API: L·∫•y danh s√°ch OrderDetails theo OrderID
func (c *OrderController) GetOrderDetails(ctx *gin.Context) {
	//  L·∫•y orderID t·ª´ URL
	orderID, err := strconv.Atoi(ctx.Param("orderID"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Order ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	//  G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch OrderDetails
	orderDetails, err := c.orderService.GetOrderDetailsByOrderID(orderID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	//  Tr·∫£ v·ªÅ JSON danh s√°ch OrderDetails
	ctx.JSON(http.StatusOK, gin.H{"order_details": orderDetails})
}

// API: L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng theo UserID
func (c *OrderController) GetOrdersByUserID(ctx *gin.Context) {
	//  L·∫•y userID t·ª´ URL
	userID, err := strconv.Atoi(ctx.Param("userID"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "User ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	//  G·ªçi service ƒë·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng
	orders, err := c.orderService.GetOrdersByUserID(userID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	//  Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng
	ctx.JSON(http.StatusOK, gin.H{"orders": orders})
}

// API: H·ªßy ƒë∆°n h√†ng theo OrderID
func (c *OrderController) CancelOrder(ctx *gin.Context) {
	//  L·∫•y orderID t·ª´ URL
	orderID, err := strconv.Atoi(ctx.Param("orderID"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Order ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	//  G·ªçi service ƒë·ªÉ h·ªßy ƒë∆°n h√†ng
	err = c.orderService.CancelOrder(orderID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	//  Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
	ctx.JSON(http.StatusOK, gin.H{"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng"})
}
